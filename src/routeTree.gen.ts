/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StoresRouteImport } from './routes/stores'
import { Route as StoreRouteImport } from './routes/store'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as RecipesRouteImport } from './routes/recipes'
import { Route as ProductsRouteImport } from './routes/products'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DriverRouteImport } from './routes/driver'
import { Route as DraftRouteImport } from './routes/draft'
import { Route as CustomerRouteImport } from './routes/customer'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as CartRouteImport } from './routes/cart'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as StoreSuccessRouteImport } from './routes/store/success'
import { Route as StoreStockManagementRouteImport } from './routes/store/stock-management'
import { Route as StoreShipmentsRouteImport } from './routes/store/shipments'
import { Route as StoreShipOrderRouteImport } from './routes/store/ship-order'
import { Route as StoreProductsRouteImport } from './routes/store/products'
import { Route as StoreMyproductsRouteImport } from './routes/store/myproducts'
import { Route as StoreManageProductsRouteImport } from './routes/store/manageProducts'
import { Route as StoreManageOrdersRouteImport } from './routes/store/manage-orders'
import { Route as StoreInventoriesRouteImport } from './routes/store/inventories'
import { Route as StoreDashboardRouteImport } from './routes/store/dashboard'
import { Route as StoreCreateProductRouteImport } from './routes/store/create-product'
import { Route as StoreCreateInventoryRouteImport } from './routes/store/create-inventory'
import { Route as DriverDashboardRouteImport } from './routes/driver/dashboard'
import { Route as CustomerSuccessRouteImport } from './routes/customer/success'
import { Route as CustomerPaymentVerifyRouteImport } from './routes/customer/payment-verify'
import { Route as CustomerPaymentSuccessfulRouteImport } from './routes/customer/payment-successful'
import { Route as CustomerOrderDetailsRouteImport } from './routes/customer/order-details'
import { Route as CustomerMyOrdersRouteImport } from './routes/customer/my-orders'
import { Route as CustomerDashboardRouteImport } from './routes/customer/dashboard'
import { Route as CustomerCreateOrderRouteImport } from './routes/customer/create-order'
import { Route as CustomerCheckoutOrderRouteImport } from './routes/customer/checkout-order'
import { Route as CustomerCartRouteImport } from './routes/customer/cart'
import { Route as AdminUsersRouteImport } from './routes/admin/users'
import { Route as AdminSuccessRouteImport } from './routes/admin/success'
import { Route as AdminStoresRouteImport } from './routes/admin/stores'
import { Route as AdminSettingsRouteImport } from './routes/admin/settings'
import { Route as AdminProductsRouteImport } from './routes/admin/products'
import { Route as AdminPaymentsRouteImport } from './routes/admin/payments'
import { Route as AdminOrdersRouteImport } from './routes/admin/orders'
import { Route as AdminInventoriesRouteImport } from './routes/admin/inventories'
import { Route as AdminDriversRouteImport } from './routes/admin/drivers'
import { Route as AdminDashboardRouteImport } from './routes/admin/dashboard'
import { Route as AdminCreateUserRouteImport } from './routes/admin/create-user'
import { Route as AdminCreateProductRouteImport } from './routes/admin/create-product'
import { Route as AdminCreateCategoryRouteImport } from './routes/admin/create-category'
import { Route as AdminCategoriesRouteImport } from './routes/admin/categories'
import { Route as AdminAnalyticsRouteImport } from './routes/admin/analytics'

const StoresRoute = StoresRouteImport.update({
  id: '/stores',
  path: '/stores',
  getParentRoute: () => rootRouteImport,
} as any)
const StoreRoute = StoreRouteImport.update({
  id: '/store',
  path: '/store',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const RecipesRoute = RecipesRouteImport.update({
  id: '/recipes',
  path: '/recipes',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsRoute = ProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DriverRoute = DriverRouteImport.update({
  id: '/driver',
  path: '/driver',
  getParentRoute: () => rootRouteImport,
} as any)
const DraftRoute = DraftRouteImport.update({
  id: '/draft',
  path: '/draft',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomerRoute = CustomerRouteImport.update({
  id: '/customer',
  path: '/customer',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const CartRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const StoreSuccessRoute = StoreSuccessRouteImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => StoreRoute,
} as any)
const StoreStockManagementRoute = StoreStockManagementRouteImport.update({
  id: '/stock-management',
  path: '/stock-management',
  getParentRoute: () => StoreRoute,
} as any)
const StoreShipmentsRoute = StoreShipmentsRouteImport.update({
  id: '/shipments',
  path: '/shipments',
  getParentRoute: () => StoreRoute,
} as any)
const StoreShipOrderRoute = StoreShipOrderRouteImport.update({
  id: '/ship-order',
  path: '/ship-order',
  getParentRoute: () => StoreRoute,
} as any)
const StoreProductsRoute = StoreProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => StoreRoute,
} as any)
const StoreMyproductsRoute = StoreMyproductsRouteImport.update({
  id: '/myproducts',
  path: '/myproducts',
  getParentRoute: () => StoreRoute,
} as any)
const StoreManageProductsRoute = StoreManageProductsRouteImport.update({
  id: '/manageProducts',
  path: '/manageProducts',
  getParentRoute: () => StoreRoute,
} as any)
const StoreManageOrdersRoute = StoreManageOrdersRouteImport.update({
  id: '/manage-orders',
  path: '/manage-orders',
  getParentRoute: () => StoreRoute,
} as any)
const StoreInventoriesRoute = StoreInventoriesRouteImport.update({
  id: '/inventories',
  path: '/inventories',
  getParentRoute: () => StoreRoute,
} as any)
const StoreDashboardRoute = StoreDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => StoreRoute,
} as any)
const StoreCreateProductRoute = StoreCreateProductRouteImport.update({
  id: '/create-product',
  path: '/create-product',
  getParentRoute: () => StoreRoute,
} as any)
const StoreCreateInventoryRoute = StoreCreateInventoryRouteImport.update({
  id: '/create-inventory',
  path: '/create-inventory',
  getParentRoute: () => StoreRoute,
} as any)
const DriverDashboardRoute = DriverDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => DriverRoute,
} as any)
const CustomerSuccessRoute = CustomerSuccessRouteImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => CustomerRoute,
} as any)
const CustomerPaymentVerifyRoute = CustomerPaymentVerifyRouteImport.update({
  id: '/payment-verify',
  path: '/payment-verify',
  getParentRoute: () => CustomerRoute,
} as any)
const CustomerPaymentSuccessfulRoute =
  CustomerPaymentSuccessfulRouteImport.update({
    id: '/payment-successful',
    path: '/payment-successful',
    getParentRoute: () => CustomerRoute,
  } as any)
const CustomerOrderDetailsRoute = CustomerOrderDetailsRouteImport.update({
  id: '/order-details',
  path: '/order-details',
  getParentRoute: () => CustomerRoute,
} as any)
const CustomerMyOrdersRoute = CustomerMyOrdersRouteImport.update({
  id: '/my-orders',
  path: '/my-orders',
  getParentRoute: () => CustomerRoute,
} as any)
const CustomerDashboardRoute = CustomerDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => CustomerRoute,
} as any)
const CustomerCreateOrderRoute = CustomerCreateOrderRouteImport.update({
  id: '/create-order',
  path: '/create-order',
  getParentRoute: () => CustomerRoute,
} as any)
const CustomerCheckoutOrderRoute = CustomerCheckoutOrderRouteImport.update({
  id: '/checkout-order',
  path: '/checkout-order',
  getParentRoute: () => CustomerRoute,
} as any)
const CustomerCartRoute = CustomerCartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => CustomerRoute,
} as any)
const AdminUsersRoute = AdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRoute,
} as any)
const AdminSuccessRoute = AdminSuccessRouteImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => AdminRoute,
} as any)
const AdminStoresRoute = AdminStoresRouteImport.update({
  id: '/stores',
  path: '/stores',
  getParentRoute: () => AdminRoute,
} as any)
const AdminSettingsRoute = AdminSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AdminRoute,
} as any)
const AdminProductsRoute = AdminProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => AdminRoute,
} as any)
const AdminPaymentsRoute = AdminPaymentsRouteImport.update({
  id: '/payments',
  path: '/payments',
  getParentRoute: () => AdminRoute,
} as any)
const AdminOrdersRoute = AdminOrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => AdminRoute,
} as any)
const AdminInventoriesRoute = AdminInventoriesRouteImport.update({
  id: '/inventories',
  path: '/inventories',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDriversRoute = AdminDriversRouteImport.update({
  id: '/drivers',
  path: '/drivers',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)
const AdminCreateUserRoute = AdminCreateUserRouteImport.update({
  id: '/create-user',
  path: '/create-user',
  getParentRoute: () => AdminRoute,
} as any)
const AdminCreateProductRoute = AdminCreateProductRouteImport.update({
  id: '/create-product',
  path: '/create-product',
  getParentRoute: () => AdminRoute,
} as any)
const AdminCreateCategoryRoute = AdminCreateCategoryRouteImport.update({
  id: '/create-category',
  path: '/create-category',
  getParentRoute: () => AdminRoute,
} as any)
const AdminCategoriesRoute = AdminCategoriesRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => AdminRoute,
} as any)
const AdminAnalyticsRoute = AdminAnalyticsRouteImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRouteWithChildren
  '/cart': typeof CartRoute
  '/contact': typeof ContactRoute
  '/customer': typeof CustomerRouteWithChildren
  '/draft': typeof DraftRoute
  '/driver': typeof DriverRouteWithChildren
  '/login': typeof LoginRoute
  '/products': typeof ProductsRoute
  '/recipes': typeof RecipesRoute
  '/register': typeof RegisterRoute
  '/store': typeof StoreRouteWithChildren
  '/stores': typeof StoresRoute
  '/admin/analytics': typeof AdminAnalyticsRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/create-category': typeof AdminCreateCategoryRoute
  '/admin/create-product': typeof AdminCreateProductRoute
  '/admin/create-user': typeof AdminCreateUserRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/drivers': typeof AdminDriversRoute
  '/admin/inventories': typeof AdminInventoriesRoute
  '/admin/orders': typeof AdminOrdersRoute
  '/admin/payments': typeof AdminPaymentsRoute
  '/admin/products': typeof AdminProductsRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/stores': typeof AdminStoresRoute
  '/admin/success': typeof AdminSuccessRoute
  '/admin/users': typeof AdminUsersRoute
  '/customer/cart': typeof CustomerCartRoute
  '/customer/checkout-order': typeof CustomerCheckoutOrderRoute
  '/customer/create-order': typeof CustomerCreateOrderRoute
  '/customer/dashboard': typeof CustomerDashboardRoute
  '/customer/my-orders': typeof CustomerMyOrdersRoute
  '/customer/order-details': typeof CustomerOrderDetailsRoute
  '/customer/payment-successful': typeof CustomerPaymentSuccessfulRoute
  '/customer/payment-verify': typeof CustomerPaymentVerifyRoute
  '/customer/success': typeof CustomerSuccessRoute
  '/driver/dashboard': typeof DriverDashboardRoute
  '/store/create-inventory': typeof StoreCreateInventoryRoute
  '/store/create-product': typeof StoreCreateProductRoute
  '/store/dashboard': typeof StoreDashboardRoute
  '/store/inventories': typeof StoreInventoriesRoute
  '/store/manage-orders': typeof StoreManageOrdersRoute
  '/store/manageProducts': typeof StoreManageProductsRoute
  '/store/myproducts': typeof StoreMyproductsRoute
  '/store/products': typeof StoreProductsRoute
  '/store/ship-order': typeof StoreShipOrderRoute
  '/store/shipments': typeof StoreShipmentsRoute
  '/store/stock-management': typeof StoreStockManagementRoute
  '/store/success': typeof StoreSuccessRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRouteWithChildren
  '/cart': typeof CartRoute
  '/contact': typeof ContactRoute
  '/customer': typeof CustomerRouteWithChildren
  '/draft': typeof DraftRoute
  '/driver': typeof DriverRouteWithChildren
  '/login': typeof LoginRoute
  '/products': typeof ProductsRoute
  '/recipes': typeof RecipesRoute
  '/register': typeof RegisterRoute
  '/store': typeof StoreRouteWithChildren
  '/stores': typeof StoresRoute
  '/admin/analytics': typeof AdminAnalyticsRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/create-category': typeof AdminCreateCategoryRoute
  '/admin/create-product': typeof AdminCreateProductRoute
  '/admin/create-user': typeof AdminCreateUserRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/drivers': typeof AdminDriversRoute
  '/admin/inventories': typeof AdminInventoriesRoute
  '/admin/orders': typeof AdminOrdersRoute
  '/admin/payments': typeof AdminPaymentsRoute
  '/admin/products': typeof AdminProductsRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/stores': typeof AdminStoresRoute
  '/admin/success': typeof AdminSuccessRoute
  '/admin/users': typeof AdminUsersRoute
  '/customer/cart': typeof CustomerCartRoute
  '/customer/checkout-order': typeof CustomerCheckoutOrderRoute
  '/customer/create-order': typeof CustomerCreateOrderRoute
  '/customer/dashboard': typeof CustomerDashboardRoute
  '/customer/my-orders': typeof CustomerMyOrdersRoute
  '/customer/order-details': typeof CustomerOrderDetailsRoute
  '/customer/payment-successful': typeof CustomerPaymentSuccessfulRoute
  '/customer/payment-verify': typeof CustomerPaymentVerifyRoute
  '/customer/success': typeof CustomerSuccessRoute
  '/driver/dashboard': typeof DriverDashboardRoute
  '/store/create-inventory': typeof StoreCreateInventoryRoute
  '/store/create-product': typeof StoreCreateProductRoute
  '/store/dashboard': typeof StoreDashboardRoute
  '/store/inventories': typeof StoreInventoriesRoute
  '/store/manage-orders': typeof StoreManageOrdersRoute
  '/store/manageProducts': typeof StoreManageProductsRoute
  '/store/myproducts': typeof StoreMyproductsRoute
  '/store/products': typeof StoreProductsRoute
  '/store/ship-order': typeof StoreShipOrderRoute
  '/store/shipments': typeof StoreShipmentsRoute
  '/store/stock-management': typeof StoreStockManagementRoute
  '/store/success': typeof StoreSuccessRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRouteWithChildren
  '/cart': typeof CartRoute
  '/contact': typeof ContactRoute
  '/customer': typeof CustomerRouteWithChildren
  '/draft': typeof DraftRoute
  '/driver': typeof DriverRouteWithChildren
  '/login': typeof LoginRoute
  '/products': typeof ProductsRoute
  '/recipes': typeof RecipesRoute
  '/register': typeof RegisterRoute
  '/store': typeof StoreRouteWithChildren
  '/stores': typeof StoresRoute
  '/admin/analytics': typeof AdminAnalyticsRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/create-category': typeof AdminCreateCategoryRoute
  '/admin/create-product': typeof AdminCreateProductRoute
  '/admin/create-user': typeof AdminCreateUserRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/drivers': typeof AdminDriversRoute
  '/admin/inventories': typeof AdminInventoriesRoute
  '/admin/orders': typeof AdminOrdersRoute
  '/admin/payments': typeof AdminPaymentsRoute
  '/admin/products': typeof AdminProductsRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/stores': typeof AdminStoresRoute
  '/admin/success': typeof AdminSuccessRoute
  '/admin/users': typeof AdminUsersRoute
  '/customer/cart': typeof CustomerCartRoute
  '/customer/checkout-order': typeof CustomerCheckoutOrderRoute
  '/customer/create-order': typeof CustomerCreateOrderRoute
  '/customer/dashboard': typeof CustomerDashboardRoute
  '/customer/my-orders': typeof CustomerMyOrdersRoute
  '/customer/order-details': typeof CustomerOrderDetailsRoute
  '/customer/payment-successful': typeof CustomerPaymentSuccessfulRoute
  '/customer/payment-verify': typeof CustomerPaymentVerifyRoute
  '/customer/success': typeof CustomerSuccessRoute
  '/driver/dashboard': typeof DriverDashboardRoute
  '/store/create-inventory': typeof StoreCreateInventoryRoute
  '/store/create-product': typeof StoreCreateProductRoute
  '/store/dashboard': typeof StoreDashboardRoute
  '/store/inventories': typeof StoreInventoriesRoute
  '/store/manage-orders': typeof StoreManageOrdersRoute
  '/store/manageProducts': typeof StoreManageProductsRoute
  '/store/myproducts': typeof StoreMyproductsRoute
  '/store/products': typeof StoreProductsRoute
  '/store/ship-order': typeof StoreShipOrderRoute
  '/store/shipments': typeof StoreShipmentsRoute
  '/store/stock-management': typeof StoreStockManagementRoute
  '/store/success': typeof StoreSuccessRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/admin'
    | '/cart'
    | '/contact'
    | '/customer'
    | '/draft'
    | '/driver'
    | '/login'
    | '/products'
    | '/recipes'
    | '/register'
    | '/store'
    | '/stores'
    | '/admin/analytics'
    | '/admin/categories'
    | '/admin/create-category'
    | '/admin/create-product'
    | '/admin/create-user'
    | '/admin/dashboard'
    | '/admin/drivers'
    | '/admin/inventories'
    | '/admin/orders'
    | '/admin/payments'
    | '/admin/products'
    | '/admin/settings'
    | '/admin/stores'
    | '/admin/success'
    | '/admin/users'
    | '/customer/cart'
    | '/customer/checkout-order'
    | '/customer/create-order'
    | '/customer/dashboard'
    | '/customer/my-orders'
    | '/customer/order-details'
    | '/customer/payment-successful'
    | '/customer/payment-verify'
    | '/customer/success'
    | '/driver/dashboard'
    | '/store/create-inventory'
    | '/store/create-product'
    | '/store/dashboard'
    | '/store/inventories'
    | '/store/manage-orders'
    | '/store/manageProducts'
    | '/store/myproducts'
    | '/store/products'
    | '/store/ship-order'
    | '/store/shipments'
    | '/store/stock-management'
    | '/store/success'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/admin'
    | '/cart'
    | '/contact'
    | '/customer'
    | '/draft'
    | '/driver'
    | '/login'
    | '/products'
    | '/recipes'
    | '/register'
    | '/store'
    | '/stores'
    | '/admin/analytics'
    | '/admin/categories'
    | '/admin/create-category'
    | '/admin/create-product'
    | '/admin/create-user'
    | '/admin/dashboard'
    | '/admin/drivers'
    | '/admin/inventories'
    | '/admin/orders'
    | '/admin/payments'
    | '/admin/products'
    | '/admin/settings'
    | '/admin/stores'
    | '/admin/success'
    | '/admin/users'
    | '/customer/cart'
    | '/customer/checkout-order'
    | '/customer/create-order'
    | '/customer/dashboard'
    | '/customer/my-orders'
    | '/customer/order-details'
    | '/customer/payment-successful'
    | '/customer/payment-verify'
    | '/customer/success'
    | '/driver/dashboard'
    | '/store/create-inventory'
    | '/store/create-product'
    | '/store/dashboard'
    | '/store/inventories'
    | '/store/manage-orders'
    | '/store/manageProducts'
    | '/store/myproducts'
    | '/store/products'
    | '/store/ship-order'
    | '/store/shipments'
    | '/store/stock-management'
    | '/store/success'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/admin'
    | '/cart'
    | '/contact'
    | '/customer'
    | '/draft'
    | '/driver'
    | '/login'
    | '/products'
    | '/recipes'
    | '/register'
    | '/store'
    | '/stores'
    | '/admin/analytics'
    | '/admin/categories'
    | '/admin/create-category'
    | '/admin/create-product'
    | '/admin/create-user'
    | '/admin/dashboard'
    | '/admin/drivers'
    | '/admin/inventories'
    | '/admin/orders'
    | '/admin/payments'
    | '/admin/products'
    | '/admin/settings'
    | '/admin/stores'
    | '/admin/success'
    | '/admin/users'
    | '/customer/cart'
    | '/customer/checkout-order'
    | '/customer/create-order'
    | '/customer/dashboard'
    | '/customer/my-orders'
    | '/customer/order-details'
    | '/customer/payment-successful'
    | '/customer/payment-verify'
    | '/customer/success'
    | '/driver/dashboard'
    | '/store/create-inventory'
    | '/store/create-product'
    | '/store/dashboard'
    | '/store/inventories'
    | '/store/manage-orders'
    | '/store/manageProducts'
    | '/store/myproducts'
    | '/store/products'
    | '/store/ship-order'
    | '/store/shipments'
    | '/store/stock-management'
    | '/store/success'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AdminRoute: typeof AdminRouteWithChildren
  CartRoute: typeof CartRoute
  ContactRoute: typeof ContactRoute
  CustomerRoute: typeof CustomerRouteWithChildren
  DraftRoute: typeof DraftRoute
  DriverRoute: typeof DriverRouteWithChildren
  LoginRoute: typeof LoginRoute
  ProductsRoute: typeof ProductsRoute
  RecipesRoute: typeof RecipesRoute
  RegisterRoute: typeof RegisterRoute
  StoreRoute: typeof StoreRouteWithChildren
  StoresRoute: typeof StoresRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/stores': {
      id: '/stores'
      path: '/stores'
      fullPath: '/stores'
      preLoaderRoute: typeof StoresRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/store': {
      id: '/store'
      path: '/store'
      fullPath: '/store'
      preLoaderRoute: typeof StoreRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recipes': {
      id: '/recipes'
      path: '/recipes'
      fullPath: '/recipes'
      preLoaderRoute: typeof RecipesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/driver': {
      id: '/driver'
      path: '/driver'
      fullPath: '/driver'
      preLoaderRoute: typeof DriverRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/draft': {
      id: '/draft'
      path: '/draft'
      fullPath: '/draft'
      preLoaderRoute: typeof DraftRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customer': {
      id: '/customer'
      path: '/customer'
      fullPath: '/customer'
      preLoaderRoute: typeof CustomerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/store/success': {
      id: '/store/success'
      path: '/success'
      fullPath: '/store/success'
      preLoaderRoute: typeof StoreSuccessRouteImport
      parentRoute: typeof StoreRoute
    }
    '/store/stock-management': {
      id: '/store/stock-management'
      path: '/stock-management'
      fullPath: '/store/stock-management'
      preLoaderRoute: typeof StoreStockManagementRouteImport
      parentRoute: typeof StoreRoute
    }
    '/store/shipments': {
      id: '/store/shipments'
      path: '/shipments'
      fullPath: '/store/shipments'
      preLoaderRoute: typeof StoreShipmentsRouteImport
      parentRoute: typeof StoreRoute
    }
    '/store/ship-order': {
      id: '/store/ship-order'
      path: '/ship-order'
      fullPath: '/store/ship-order'
      preLoaderRoute: typeof StoreShipOrderRouteImport
      parentRoute: typeof StoreRoute
    }
    '/store/products': {
      id: '/store/products'
      path: '/products'
      fullPath: '/store/products'
      preLoaderRoute: typeof StoreProductsRouteImport
      parentRoute: typeof StoreRoute
    }
    '/store/myproducts': {
      id: '/store/myproducts'
      path: '/myproducts'
      fullPath: '/store/myproducts'
      preLoaderRoute: typeof StoreMyproductsRouteImport
      parentRoute: typeof StoreRoute
    }
    '/store/manageProducts': {
      id: '/store/manageProducts'
      path: '/manageProducts'
      fullPath: '/store/manageProducts'
      preLoaderRoute: typeof StoreManageProductsRouteImport
      parentRoute: typeof StoreRoute
    }
    '/store/manage-orders': {
      id: '/store/manage-orders'
      path: '/manage-orders'
      fullPath: '/store/manage-orders'
      preLoaderRoute: typeof StoreManageOrdersRouteImport
      parentRoute: typeof StoreRoute
    }
    '/store/inventories': {
      id: '/store/inventories'
      path: '/inventories'
      fullPath: '/store/inventories'
      preLoaderRoute: typeof StoreInventoriesRouteImport
      parentRoute: typeof StoreRoute
    }
    '/store/dashboard': {
      id: '/store/dashboard'
      path: '/dashboard'
      fullPath: '/store/dashboard'
      preLoaderRoute: typeof StoreDashboardRouteImport
      parentRoute: typeof StoreRoute
    }
    '/store/create-product': {
      id: '/store/create-product'
      path: '/create-product'
      fullPath: '/store/create-product'
      preLoaderRoute: typeof StoreCreateProductRouteImport
      parentRoute: typeof StoreRoute
    }
    '/store/create-inventory': {
      id: '/store/create-inventory'
      path: '/create-inventory'
      fullPath: '/store/create-inventory'
      preLoaderRoute: typeof StoreCreateInventoryRouteImport
      parentRoute: typeof StoreRoute
    }
    '/driver/dashboard': {
      id: '/driver/dashboard'
      path: '/dashboard'
      fullPath: '/driver/dashboard'
      preLoaderRoute: typeof DriverDashboardRouteImport
      parentRoute: typeof DriverRoute
    }
    '/customer/success': {
      id: '/customer/success'
      path: '/success'
      fullPath: '/customer/success'
      preLoaderRoute: typeof CustomerSuccessRouteImport
      parentRoute: typeof CustomerRoute
    }
    '/customer/payment-verify': {
      id: '/customer/payment-verify'
      path: '/payment-verify'
      fullPath: '/customer/payment-verify'
      preLoaderRoute: typeof CustomerPaymentVerifyRouteImport
      parentRoute: typeof CustomerRoute
    }
    '/customer/payment-successful': {
      id: '/customer/payment-successful'
      path: '/payment-successful'
      fullPath: '/customer/payment-successful'
      preLoaderRoute: typeof CustomerPaymentSuccessfulRouteImport
      parentRoute: typeof CustomerRoute
    }
    '/customer/order-details': {
      id: '/customer/order-details'
      path: '/order-details'
      fullPath: '/customer/order-details'
      preLoaderRoute: typeof CustomerOrderDetailsRouteImport
      parentRoute: typeof CustomerRoute
    }
    '/customer/my-orders': {
      id: '/customer/my-orders'
      path: '/my-orders'
      fullPath: '/customer/my-orders'
      preLoaderRoute: typeof CustomerMyOrdersRouteImport
      parentRoute: typeof CustomerRoute
    }
    '/customer/dashboard': {
      id: '/customer/dashboard'
      path: '/dashboard'
      fullPath: '/customer/dashboard'
      preLoaderRoute: typeof CustomerDashboardRouteImport
      parentRoute: typeof CustomerRoute
    }
    '/customer/create-order': {
      id: '/customer/create-order'
      path: '/create-order'
      fullPath: '/customer/create-order'
      preLoaderRoute: typeof CustomerCreateOrderRouteImport
      parentRoute: typeof CustomerRoute
    }
    '/customer/checkout-order': {
      id: '/customer/checkout-order'
      path: '/checkout-order'
      fullPath: '/customer/checkout-order'
      preLoaderRoute: typeof CustomerCheckoutOrderRouteImport
      parentRoute: typeof CustomerRoute
    }
    '/customer/cart': {
      id: '/customer/cart'
      path: '/cart'
      fullPath: '/customer/cart'
      preLoaderRoute: typeof CustomerCartRouteImport
      parentRoute: typeof CustomerRoute
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/success': {
      id: '/admin/success'
      path: '/success'
      fullPath: '/admin/success'
      preLoaderRoute: typeof AdminSuccessRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/stores': {
      id: '/admin/stores'
      path: '/stores'
      fullPath: '/admin/stores'
      preLoaderRoute: typeof AdminStoresRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/settings': {
      id: '/admin/settings'
      path: '/settings'
      fullPath: '/admin/settings'
      preLoaderRoute: typeof AdminSettingsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/products': {
      id: '/admin/products'
      path: '/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminProductsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/payments': {
      id: '/admin/payments'
      path: '/payments'
      fullPath: '/admin/payments'
      preLoaderRoute: typeof AdminPaymentsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/orders': {
      id: '/admin/orders'
      path: '/orders'
      fullPath: '/admin/orders'
      preLoaderRoute: typeof AdminOrdersRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/inventories': {
      id: '/admin/inventories'
      path: '/inventories'
      fullPath: '/admin/inventories'
      preLoaderRoute: typeof AdminInventoriesRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/drivers': {
      id: '/admin/drivers'
      path: '/drivers'
      fullPath: '/admin/drivers'
      preLoaderRoute: typeof AdminDriversRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/create-user': {
      id: '/admin/create-user'
      path: '/create-user'
      fullPath: '/admin/create-user'
      preLoaderRoute: typeof AdminCreateUserRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/create-product': {
      id: '/admin/create-product'
      path: '/create-product'
      fullPath: '/admin/create-product'
      preLoaderRoute: typeof AdminCreateProductRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/create-category': {
      id: '/admin/create-category'
      path: '/create-category'
      fullPath: '/admin/create-category'
      preLoaderRoute: typeof AdminCreateCategoryRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/categories': {
      id: '/admin/categories'
      path: '/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof AdminCategoriesRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/analytics': {
      id: '/admin/analytics'
      path: '/analytics'
      fullPath: '/admin/analytics'
      preLoaderRoute: typeof AdminAnalyticsRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminAnalyticsRoute: typeof AdminAnalyticsRoute
  AdminCategoriesRoute: typeof AdminCategoriesRoute
  AdminCreateCategoryRoute: typeof AdminCreateCategoryRoute
  AdminCreateProductRoute: typeof AdminCreateProductRoute
  AdminCreateUserRoute: typeof AdminCreateUserRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminDriversRoute: typeof AdminDriversRoute
  AdminInventoriesRoute: typeof AdminInventoriesRoute
  AdminOrdersRoute: typeof AdminOrdersRoute
  AdminPaymentsRoute: typeof AdminPaymentsRoute
  AdminProductsRoute: typeof AdminProductsRoute
  AdminSettingsRoute: typeof AdminSettingsRoute
  AdminStoresRoute: typeof AdminStoresRoute
  AdminSuccessRoute: typeof AdminSuccessRoute
  AdminUsersRoute: typeof AdminUsersRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminAnalyticsRoute: AdminAnalyticsRoute,
  AdminCategoriesRoute: AdminCategoriesRoute,
  AdminCreateCategoryRoute: AdminCreateCategoryRoute,
  AdminCreateProductRoute: AdminCreateProductRoute,
  AdminCreateUserRoute: AdminCreateUserRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  AdminDriversRoute: AdminDriversRoute,
  AdminInventoriesRoute: AdminInventoriesRoute,
  AdminOrdersRoute: AdminOrdersRoute,
  AdminPaymentsRoute: AdminPaymentsRoute,
  AdminProductsRoute: AdminProductsRoute,
  AdminSettingsRoute: AdminSettingsRoute,
  AdminStoresRoute: AdminStoresRoute,
  AdminSuccessRoute: AdminSuccessRoute,
  AdminUsersRoute: AdminUsersRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface CustomerRouteChildren {
  CustomerCartRoute: typeof CustomerCartRoute
  CustomerCheckoutOrderRoute: typeof CustomerCheckoutOrderRoute
  CustomerCreateOrderRoute: typeof CustomerCreateOrderRoute
  CustomerDashboardRoute: typeof CustomerDashboardRoute
  CustomerMyOrdersRoute: typeof CustomerMyOrdersRoute
  CustomerOrderDetailsRoute: typeof CustomerOrderDetailsRoute
  CustomerPaymentSuccessfulRoute: typeof CustomerPaymentSuccessfulRoute
  CustomerPaymentVerifyRoute: typeof CustomerPaymentVerifyRoute
  CustomerSuccessRoute: typeof CustomerSuccessRoute
}

const CustomerRouteChildren: CustomerRouteChildren = {
  CustomerCartRoute: CustomerCartRoute,
  CustomerCheckoutOrderRoute: CustomerCheckoutOrderRoute,
  CustomerCreateOrderRoute: CustomerCreateOrderRoute,
  CustomerDashboardRoute: CustomerDashboardRoute,
  CustomerMyOrdersRoute: CustomerMyOrdersRoute,
  CustomerOrderDetailsRoute: CustomerOrderDetailsRoute,
  CustomerPaymentSuccessfulRoute: CustomerPaymentSuccessfulRoute,
  CustomerPaymentVerifyRoute: CustomerPaymentVerifyRoute,
  CustomerSuccessRoute: CustomerSuccessRoute,
}

const CustomerRouteWithChildren = CustomerRoute._addFileChildren(
  CustomerRouteChildren,
)

interface DriverRouteChildren {
  DriverDashboardRoute: typeof DriverDashboardRoute
}

const DriverRouteChildren: DriverRouteChildren = {
  DriverDashboardRoute: DriverDashboardRoute,
}

const DriverRouteWithChildren =
  DriverRoute._addFileChildren(DriverRouteChildren)

interface StoreRouteChildren {
  StoreCreateInventoryRoute: typeof StoreCreateInventoryRoute
  StoreCreateProductRoute: typeof StoreCreateProductRoute
  StoreDashboardRoute: typeof StoreDashboardRoute
  StoreInventoriesRoute: typeof StoreInventoriesRoute
  StoreManageOrdersRoute: typeof StoreManageOrdersRoute
  StoreManageProductsRoute: typeof StoreManageProductsRoute
  StoreMyproductsRoute: typeof StoreMyproductsRoute
  StoreProductsRoute: typeof StoreProductsRoute
  StoreShipOrderRoute: typeof StoreShipOrderRoute
  StoreShipmentsRoute: typeof StoreShipmentsRoute
  StoreStockManagementRoute: typeof StoreStockManagementRoute
  StoreSuccessRoute: typeof StoreSuccessRoute
}

const StoreRouteChildren: StoreRouteChildren = {
  StoreCreateInventoryRoute: StoreCreateInventoryRoute,
  StoreCreateProductRoute: StoreCreateProductRoute,
  StoreDashboardRoute: StoreDashboardRoute,
  StoreInventoriesRoute: StoreInventoriesRoute,
  StoreManageOrdersRoute: StoreManageOrdersRoute,
  StoreManageProductsRoute: StoreManageProductsRoute,
  StoreMyproductsRoute: StoreMyproductsRoute,
  StoreProductsRoute: StoreProductsRoute,
  StoreShipOrderRoute: StoreShipOrderRoute,
  StoreShipmentsRoute: StoreShipmentsRoute,
  StoreStockManagementRoute: StoreStockManagementRoute,
  StoreSuccessRoute: StoreSuccessRoute,
}

const StoreRouteWithChildren = StoreRoute._addFileChildren(StoreRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AdminRoute: AdminRouteWithChildren,
  CartRoute: CartRoute,
  ContactRoute: ContactRoute,
  CustomerRoute: CustomerRouteWithChildren,
  DraftRoute: DraftRoute,
  DriverRoute: DriverRouteWithChildren,
  LoginRoute: LoginRoute,
  ProductsRoute: ProductsRoute,
  RecipesRoute: RecipesRoute,
  RegisterRoute: RegisterRoute,
  StoreRoute: StoreRouteWithChildren,
  StoresRoute: StoresRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
