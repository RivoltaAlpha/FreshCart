/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StoreRouteImport } from './routes/store'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as ProductsRouteImport } from './routes/products'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DriverRouteImport } from './routes/driver'
import { Route as DraftRouteImport } from './routes/draft'
import { Route as CustomerRouteImport } from './routes/customer'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as CartRouteImport } from './routes/cart'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as StoreDashboardRouteImport } from './routes/store/dashboard'
import { Route as DriverDashboardRouteImport } from './routes/driver/dashboard'
import { Route as CustomerDashboardRouteImport } from './routes/customer/dashboard'
import { Route as AdminDashboardRouteImport } from './routes/admin/dashboard'

const StoreRoute = StoreRouteImport.update({
  id: '/store',
  path: '/store',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsRoute = ProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DriverRoute = DriverRouteImport.update({
  id: '/driver',
  path: '/driver',
  getParentRoute: () => rootRouteImport,
} as any)
const DraftRoute = DraftRouteImport.update({
  id: '/draft',
  path: '/draft',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomerRoute = CustomerRouteImport.update({
  id: '/customer',
  path: '/customer',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const CartRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const StoreDashboardRoute = StoreDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => StoreRoute,
} as any)
const DriverDashboardRoute = DriverDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => DriverRoute,
} as any)
const CustomerDashboardRoute = CustomerDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => CustomerRoute,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRouteWithChildren
  '/cart': typeof CartRoute
  '/contact': typeof ContactRoute
  '/customer': typeof CustomerRouteWithChildren
  '/draft': typeof DraftRoute
  '/driver': typeof DriverRouteWithChildren
  '/login': typeof LoginRoute
  '/products': typeof ProductsRoute
  '/register': typeof RegisterRoute
  '/store': typeof StoreRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRoute
  '/customer/dashboard': typeof CustomerDashboardRoute
  '/driver/dashboard': typeof DriverDashboardRoute
  '/store/dashboard': typeof StoreDashboardRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRouteWithChildren
  '/cart': typeof CartRoute
  '/contact': typeof ContactRoute
  '/customer': typeof CustomerRouteWithChildren
  '/draft': typeof DraftRoute
  '/driver': typeof DriverRouteWithChildren
  '/login': typeof LoginRoute
  '/products': typeof ProductsRoute
  '/register': typeof RegisterRoute
  '/store': typeof StoreRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRoute
  '/customer/dashboard': typeof CustomerDashboardRoute
  '/driver/dashboard': typeof DriverDashboardRoute
  '/store/dashboard': typeof StoreDashboardRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRouteWithChildren
  '/cart': typeof CartRoute
  '/contact': typeof ContactRoute
  '/customer': typeof CustomerRouteWithChildren
  '/draft': typeof DraftRoute
  '/driver': typeof DriverRouteWithChildren
  '/login': typeof LoginRoute
  '/products': typeof ProductsRoute
  '/register': typeof RegisterRoute
  '/store': typeof StoreRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRoute
  '/customer/dashboard': typeof CustomerDashboardRoute
  '/driver/dashboard': typeof DriverDashboardRoute
  '/store/dashboard': typeof StoreDashboardRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/admin'
    | '/cart'
    | '/contact'
    | '/customer'
    | '/draft'
    | '/driver'
    | '/login'
    | '/products'
    | '/register'
    | '/store'
    | '/admin/dashboard'
    | '/customer/dashboard'
    | '/driver/dashboard'
    | '/store/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/admin'
    | '/cart'
    | '/contact'
    | '/customer'
    | '/draft'
    | '/driver'
    | '/login'
    | '/products'
    | '/register'
    | '/store'
    | '/admin/dashboard'
    | '/customer/dashboard'
    | '/driver/dashboard'
    | '/store/dashboard'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/admin'
    | '/cart'
    | '/contact'
    | '/customer'
    | '/draft'
    | '/driver'
    | '/login'
    | '/products'
    | '/register'
    | '/store'
    | '/admin/dashboard'
    | '/customer/dashboard'
    | '/driver/dashboard'
    | '/store/dashboard'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AdminRoute: typeof AdminRouteWithChildren
  CartRoute: typeof CartRoute
  ContactRoute: typeof ContactRoute
  CustomerRoute: typeof CustomerRouteWithChildren
  DraftRoute: typeof DraftRoute
  DriverRoute: typeof DriverRouteWithChildren
  LoginRoute: typeof LoginRoute
  ProductsRoute: typeof ProductsRoute
  RegisterRoute: typeof RegisterRoute
  StoreRoute: typeof StoreRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/store': {
      id: '/store'
      path: '/store'
      fullPath: '/store'
      preLoaderRoute: typeof StoreRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/driver': {
      id: '/driver'
      path: '/driver'
      fullPath: '/driver'
      preLoaderRoute: typeof DriverRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/draft': {
      id: '/draft'
      path: '/draft'
      fullPath: '/draft'
      preLoaderRoute: typeof DraftRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customer': {
      id: '/customer'
      path: '/customer'
      fullPath: '/customer'
      preLoaderRoute: typeof CustomerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/store/dashboard': {
      id: '/store/dashboard'
      path: '/dashboard'
      fullPath: '/store/dashboard'
      preLoaderRoute: typeof StoreDashboardRouteImport
      parentRoute: typeof StoreRoute
    }
    '/driver/dashboard': {
      id: '/driver/dashboard'
      path: '/dashboard'
      fullPath: '/driver/dashboard'
      preLoaderRoute: typeof DriverDashboardRouteImport
      parentRoute: typeof DriverRoute
    }
    '/customer/dashboard': {
      id: '/customer/dashboard'
      path: '/dashboard'
      fullPath: '/customer/dashboard'
      preLoaderRoute: typeof CustomerDashboardRouteImport
      parentRoute: typeof CustomerRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminDashboardRoute: typeof AdminDashboardRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminDashboardRoute: AdminDashboardRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface CustomerRouteChildren {
  CustomerDashboardRoute: typeof CustomerDashboardRoute
}

const CustomerRouteChildren: CustomerRouteChildren = {
  CustomerDashboardRoute: CustomerDashboardRoute,
}

const CustomerRouteWithChildren = CustomerRoute._addFileChildren(
  CustomerRouteChildren,
)

interface DriverRouteChildren {
  DriverDashboardRoute: typeof DriverDashboardRoute
}

const DriverRouteChildren: DriverRouteChildren = {
  DriverDashboardRoute: DriverDashboardRoute,
}

const DriverRouteWithChildren =
  DriverRoute._addFileChildren(DriverRouteChildren)

interface StoreRouteChildren {
  StoreDashboardRoute: typeof StoreDashboardRoute
}

const StoreRouteChildren: StoreRouteChildren = {
  StoreDashboardRoute: StoreDashboardRoute,
}

const StoreRouteWithChildren = StoreRoute._addFileChildren(StoreRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AdminRoute: AdminRouteWithChildren,
  CartRoute: CartRoute,
  ContactRoute: ContactRoute,
  CustomerRoute: CustomerRouteWithChildren,
  DraftRoute: DraftRoute,
  DriverRoute: DriverRouteWithChildren,
  LoginRoute: LoginRoute,
  ProductsRoute: ProductsRoute,
  RegisterRoute: RegisterRoute,
  StoreRoute: StoreRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
